swirl()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
x - 3
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1:4) + c(0, 10)
c(1:4)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
dir()
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
info()
nxt()
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "test.dir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
dir()
unlink("testdir", recursive = TRUE)
bye()
exit()
library("swirl")
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
req(0, times=40)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "shawn")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
x < matrix(1:9, nrow = 3, ncol = 3)
x <- matrix(1:9, nrow = 3, ncol = 3)
x
makeCacheMatrix(x)
x
environment()
y
debugSource('~/Documents/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
?
help
x <- makeCacheMatrix()
x
x$get()
x$set(matrix(1:9, ncol = 3, nrow = 3))
x
x$get()
x$getInverse()
cacheSolve(x)
sample(1:9)
matrix(sample(9), nrow = 3, ncol = 3)
x <- matrix(sample(9), nrow = 3, ncol = 3)
makeCacheMatrix(x)
x$get()
x <- makeCacheMatrix()
x$set(matrix(sample(9), nrow = 3, ncol = 3))
x$get()
cacheSolve(x)
x$getInverse()
source('~/Documents/ProgrammingAssignment2/cachematrix.R')
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 7))
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
remainder(2, div = 4)
args(remainder)
floor(11.1
)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("programming", "is", "fun!")
paste("programming", "is", "fun!", collapse = " ")
paste("programming", "is", "fun!", collapse = "\n")
paste("programming", "is", "fun!", collapse = "a")
paste("programming", "is", "fun!", collapse = NULL)
paste("Programming", "is", "fun!", collapse = NULL)
submit()
telegram("nice day!")
submit()
mad_libs(place = "shanghai", adjective = "big", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flag[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, ,5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$landmass, flags$animate, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
bye()
library(datasets)
data("iris")
?iris
iris
mean(iris$Sapel.Lenght)
iris$Sepal.Length
iris$Sepal.Length[iris$Species == "virginica"]
mean(iris$Sepal.Length[iris$Species == "virginica"])
head(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
data("mtcars")
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
?abs
abs(209.21429 - 82.63636)
debug(ls)
ls
ls()
swirl()
library(swirl)
ls
ls()
ls()
?debug
undebug(ls)
undebug(ls)
ls()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample(10)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replacement = TRUE, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips < - sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 100, prob = 0.7)
rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, lambda = 10)
my_pois <- replication(100, rpois(5, lambda = 10))
my_pois <- replicate(100, rpois(5, lambda = 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
getwd()
setwd("~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3")
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rprog-scripts-submitscript3.R')
rep(1, 10)
x <- rep(1, 10)
x
x[x == 1]
unique(x)
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
rankall("heart failure")
q
debugSource('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
rankall("heart failure")
?apply
?rank
rank(sample(10))
x <- sample(10)
x
rank(x)
debugSource('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
rankall("heart failure")
tapply(sel_outcome[, outcome], sel_outcome$State, rank)
rankall("heart failure")
r <- tapply(sel_outcome[, outcome], sel_outcome$State, rank)
class(r)
length(r)
r
apply(r, rbind)
apply(r[,], cbind)
x <- cbind(vect_state, r)
x
cbind(x[,"vect_state"], x[, r][num])
cbind(x[,"vect_state"], x[, "r"][num])
cbind(x[,"vect_state"], x[, "r"][5])
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
debugSource('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
rankall("heart failure")
View(state_rank)
source('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
debugSource('~/Documents/Data-Science-Courses/R Programming/ProgrammingAssignment3/rankall.R')
rankall("heart failure")
exit()
