source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(1:9, 3, 3)
x
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
cacheSolve(x)
list_x <- makeCacheMatrix(x)
cacheSolve(list_x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(list_x)
cacheSolve(list_x)
list_x <- makeCacheMatrix(x)
list_x$get()
list_x$set(x)
list_x$get()
matrix_x <- makeCacheMatrix(x)
matrix_x
matrix_x$set
matrix_x$set(x)
matrix_x$set
matrix_x$get
matrix_x$get()
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x$get()
matrix_x$set(x)
matrix_x$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
?matrix
?rnorm
x[3,3] = 100
x
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5,2)
?qpois
getwd()
dir()
swirl()
library(swirl)
ls
rm(list = ls())
ls()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
ls.files()
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?file.path
?dir.create
dir.create(file.path("testdir3", "testdir2")
)
dir.create(file.path("testdir3", "testdir2", recursive = TRUE)
)
dir.create(file.path("testdir2", "testdir3", recursive = TRUE))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
?unlink
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
exit
bye()
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,2,3)
y <- c(4,5,6)
z <- cbind(x,y)
z
?rbind
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
class(x[2])
class(x[[2]])
setwd(file.path(getwd(), "R Programming Course"))
getwd()
dir
dir()
read.csv("hw1_data.csv")
data <- read.csv("hw1_data.csv")
head(data)
class(data)
nrow(data)
data[nrow(data)-1:nrow(data),]
data[(nrow(data)-1):(nrow(data)),]
data[-1:10,]
data[10-1:20,]
data[10-1:11,]
data[47,]
data[is.na(Ozone)]
data[is.na(data$Ozone)]
data[is.na(data[,1])]
subset(data, is.na(Ozone))
nrow(subset(data, is.na(Ozone)))
mean(data[,1], na.rm = TRUE)
mean(data$Ozone, na.rm = TRUE)
data[Ozone > 31]
subset(data, Ozone > 31 & Temp > 90)
mean(subset(data, Ozone > 31 & Temp > 90)$Solar.R)
mean(subset(data, Month == 6)$Temp)
max(subset(data, Month == 5)$Ozone)
max(subset(data, Month == 5)$Ozone, na.rm = TRUE)
setwd(old.dir)
setwd(file.path(getwd(), "swirl")
)
getwd()
swirl()
libaray("swirl")
libraray("swirl")
library("swirl")
swirl()
getwd()
ls()
info()
main()
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
?length
1:length(my_seq)
seq(along.with = my_seq)
?seq
seq_along(my_seq)
rep(0, times = 40)
rep(c(1, 2, 3), times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
