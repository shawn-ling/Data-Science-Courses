source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(1:9, 3, 3)
x
makeCacheMatrix(x)
cacheSolve(x)
makeCacheMatrix(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
cacheSolve(x)
list_x <- makeCacheMatrix(x)
cacheSolve(list_x)
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(list_x)
cacheSolve(list_x)
list_x <- makeCacheMatrix(x)
list_x$get()
list_x$set(x)
list_x$get()
matrix_x <- makeCacheMatrix(x)
matrix_x
matrix_x$set
matrix_x$set(x)
matrix_x$set
matrix_x$get
matrix_x$get()
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x$get()
matrix_x$set(x)
matrix_x$get()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
?matrix
?rnorm
x[3,3] = 100
x
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
matrix_x <- makeCacheMatrix(x)
matrix_x$get()
cacheSolve(matrix_x)
cacheSolve(matrix_x)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5,2)
?qpois
getwd()
dir()
swirl()
library(swirl)
ls
rm(list = ls())
ls()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
ls.files()
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?file.path
?dir.create
dir.create(file.path("testdir3", "testdir2")
)
dir.create(file.path("testdir3", "testdir2", recursive = TRUE)
)
dir.create(file.path("testdir2", "testdir3", recursive = TRUE))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
?unlink
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
exit
bye()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", data_download)
file.create(data_download)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "data_download")
ls()
dir()
read.table("data_download")
read.csv("data_download", header = TRUE)
data_table <- read.csv("data_download", header = TRUE)
head(data_table, 10)
names(data_table)
nrow(data_table[VAL == 24])
nrow(data_table[data_table$VAL == 24])
nrow(data_table[data_table$VAL == 24,])
data_table[data_table$VAL == 24,1:40]
data_table[data_table$VAL == 24,1:40]
data_table[(!is.na(data_table$VAL)) & (data_table$VAL == 24),1:40]
nrow(data_table[(!is.na(data_table$VAL)) & (data_table$VAL == 24),1:40])
library(XML)
library(xml)
?xmlName
install.packages("xml")
?xmlName
install.packages("crayon")
?xmlName
library(xml)
install.packages("XML")
install.packages("xml")
install.packages("XML")
library(XML)
install.packages("crayon")
library("XML", lib.loc="~/R/win-library/3.1")
load("~/GitHub/Getting & Cleaning Data/getdata_data_DATA.gov_NGAP.xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("XLSX")
install.packages("xlsx")
install.packages("C:/Users/i045177/Downloads/xlsx_0.5.7.zip", repos = NULL, type = "win.binary")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("rjava")
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsx)
install.packages("C:/Users/i045177/Downloads/rJava_0.9-6.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/i045177/Downloads/xlsxjars_0.6.1.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/i045177/Downloads/xlsx_0.5.7.zip", repos = NULL, type = "win.binary")
library(xlsx)
read.xlsx("~/GitHub/Getting & Cleaning Data/getdata_data_DATA.gov_NGAP.xlsx")
read.xlsx("~/GitHub/Getting & Cleaning Data/getdata_data_DATA.gov_NGAP.xlsx", sheetIndex = 1)
library(datasets)
data("iris")
head(irix)
head(iris)
mean(iris[,1])
mean(iris[,1], na.rm = TRUE)
mean(iris[,1], na.rm = TRUE)
subset(iris, iris$Species = virginica)
subset(iris, iris$Species == virginica)
subset(iris, iris$Species == "virginica")
mean(subset(iris, iris$Species == "virginica")[,1], na.rm = TRUE)
data("mtcars")
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)[3] - sapply(split(mtcars$hp, mtcars$cyl), mean)[1]
swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- ( num_vect < 1 )
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "shawn")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
bye
info()
bye()
